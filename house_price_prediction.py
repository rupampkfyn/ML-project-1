# -*- coding: utf-8 -*-
"""house price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N8-MjWI2mZ_0D3G5QWzDVm-H3jUzDSef

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the boston house price dataset"""

house_price_dataset = pd.read_csv('/content/housing.csv', header=None)

# Reshape the DataFrame into multiple columns
num_columns = 14
house_price_dataset = house_price_dataset[0].str.split(expand=True)

# Assign column names
col_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'Price']
house_price_dataset.columns = col_names
house_price_dataset = house_price_dataset.apply(pd.to_numeric)
# Display the DataFrame
print(house_price_dataset.head())

"""Checking the no. of rows and columns"""

house_price_dataset.shape

"""Checking null values"""

house_price_dataset.isnull().sum()

#statistical measures of the dataset
house_price_dataset.describe()

"""Understanding the correlation between various features in the dataset

1. Positive Correlation
2. Negative Correlation
"""

correlation = house_price_dataset.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""Splitting the data and target"""

X= house_price_dataset.drop(['Price'],axis=1)
Y= house_price_dataset['Price']

print(X)
print(Y)

"""Splitting the data into train data and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, random_state = 2)

print(X.shape, X_train.shape,X_test.shape)

"""Model Training

XGBoost Regressor
"""

# loading the model
model = XGBRegressor()

#training the model with X_train
model.fit(X_train,Y_train)

"""Evaluation

Prediction on training data
"""

#accuracy for prediction on training data
training_data_prediction = model.predict(X_train)

print(training_data_prediction)

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# mean absolute error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print("R squared error :", score_1)
print("Mean absolute error :", score_2)

"""Visualizing the actual Prices and predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual price vs Predicted Price")
plt.show()

"""Prediction on test data"""

#accuracy for prediction on test data
test_data_prediction = model.predict(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# mean absolute error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("R squared error :", score_1)
print("Mean absolute error :", score_2)

